package nl.mpcjanssen.simpletask.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import nl.mpcjanssen.simpletask.dao.EntryTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_TAG".
*/
public class EntryTagDao extends AbstractDao<EntryTag, Void> {

    public static final String TABLENAME = "ENTRY_TAG";

    /**
     * Properties of entity EntryTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EntryLine = new Property(0, long.class, "entryLine", false, "ENTRY_LINE");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
    };

    private Query<EntryTag> entry_EntryTagListQuery;

    public EntryTagDao(DaoConfig config) {
        super(config);
    }
    
    public EntryTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_TAG\" (" + //
                "\"ENTRY_LINE\" INTEGER NOT NULL ," + // 0: entryLine
                "\"TEXT\" TEXT NOT NULL );"); // 1: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_TAG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntryTag entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEntryLine());
        stmt.bindString(2, entity.getText());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntryTag readEntity(Cursor cursor, int offset) {
        EntryTag entity = new EntryTag( //
            cursor.getLong(offset + 0), // entryLine
            cursor.getString(offset + 1) // text
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntryTag entity, int offset) {
        entity.setEntryLine(cursor.getLong(offset + 0));
        entity.setText(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntryTag entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntryTag entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "entryTagList" to-many relationship of Entry. */
    public List<EntryTag> _queryEntry_EntryTagList(long entryLine) {
        synchronized (this) {
            if (entry_EntryTagListQuery == null) {
                QueryBuilder<EntryTag> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EntryLine.eq(null));
                entry_EntryTagListQuery = queryBuilder.build();
            }
        }
        Query<EntryTag> query = entry_EntryTagListQuery.forCurrentThread();
        query.setParameter(0, entryLine);
        return query.list();
    }

}
