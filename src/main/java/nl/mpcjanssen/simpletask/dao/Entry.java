package nl.mpcjanssen.simpletask.dao;

import java.util.List;
import nl.mpcjanssen.simpletask.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ENTRY".
 */
public class Entry {

    private long line;
    private boolean hidden;
    /** Not-null value. */
    private String text;
    private boolean completed;
    /** Not-null value. */
    private String priority;
    private String completionDate;
    private String createDate;
    private String thresholdDate;
    private String dueDate;
    private int endOfCompPrefix;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EntryDao myDao;

    private List<EntryTag> entryTagList;
    private List<EntryList> entryListList;

    public Entry() {
    }

    public Entry(long line) {
        this.line = line;
    }

    public Entry(long line, boolean hidden, String text, boolean completed, String priority, String completionDate, String createDate, String thresholdDate, String dueDate, int endOfCompPrefix) {
        this.line = line;
        this.hidden = hidden;
        this.text = text;
        this.completed = completed;
        this.priority = priority;
        this.completionDate = completionDate;
        this.createDate = createDate;
        this.thresholdDate = thresholdDate;
        this.dueDate = dueDate;
        this.endOfCompPrefix = endOfCompPrefix;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEntryDao() : null;
    }

    public long getLine() {
        return line;
    }

    public void setLine(long line) {
        this.line = line;
    }

    public boolean getHidden() {
        return hidden;
    }

    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }

    /** Not-null value. */
    public String getText() {
        return text;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setText(String text) {
        this.text = text;
    }

    public boolean getCompleted() {
        return completed;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }

    /** Not-null value. */
    public String getPriority() {
        return priority;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPriority(String priority) {
        this.priority = priority;
    }

    public String getCompletionDate() {
        return completionDate;
    }

    public void setCompletionDate(String completionDate) {
        this.completionDate = completionDate;
    }

    public String getCreateDate() {
        return createDate;
    }

    public void setCreateDate(String createDate) {
        this.createDate = createDate;
    }

    public String getThresholdDate() {
        return thresholdDate;
    }

    public void setThresholdDate(String thresholdDate) {
        this.thresholdDate = thresholdDate;
    }

    public String getDueDate() {
        return dueDate;
    }

    public void setDueDate(String dueDate) {
        this.dueDate = dueDate;
    }

    public int getEndOfCompPrefix() {
        return endOfCompPrefix;
    }

    public void setEndOfCompPrefix(int endOfCompPrefix) {
        this.endOfCompPrefix = endOfCompPrefix;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<EntryTag> getEntryTagList() {
        if (entryTagList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EntryTagDao targetDao = daoSession.getEntryTagDao();
            List<EntryTag> entryTagListNew = targetDao._queryEntry_EntryTagList(line);
            synchronized (this) {
                if(entryTagList == null) {
                    entryTagList = entryTagListNew;
                }
            }
        }
        return entryTagList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEntryTagList() {
        entryTagList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<EntryList> getEntryListList() {
        if (entryListList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EntryListDao targetDao = daoSession.getEntryListDao();
            List<EntryList> entryListListNew = targetDao._queryEntry_EntryListList(line);
            synchronized (this) {
                if(entryListList == null) {
                    entryListList = entryListListNew;
                }
            }
        }
        return entryListList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEntryListList() {
        entryListList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
