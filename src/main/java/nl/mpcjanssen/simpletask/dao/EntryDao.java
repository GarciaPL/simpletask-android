package nl.mpcjanssen.simpletask.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nl.mpcjanssen.simpletask.dao.Entry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY".
*/
public class EntryDao extends AbstractDao<Entry, Long> {

    public static final String TABLENAME = "ENTRY";

    /**
     * Properties of entity Entry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Line = new Property(0, long.class, "line", true, "LINE");
        public final static Property Selected = new Property(1, boolean.class, "selected", false, "SELECTED");
        public final static Property Hidden = new Property(2, boolean.class, "hidden", false, "HIDDEN");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Completed = new Property(4, boolean.class, "completed", false, "COMPLETED");
        public final static Property Priority = new Property(5, String.class, "priority", false, "PRIORITY");
        public final static Property CompletionDate = new Property(6, String.class, "completionDate", false, "COMPLETION_DATE");
        public final static Property CreateDate = new Property(7, String.class, "createDate", false, "CREATE_DATE");
        public final static Property ThresholdDate = new Property(8, String.class, "thresholdDate", false, "THRESHOLD_DATE");
        public final static Property DueDate = new Property(9, String.class, "dueDate", false, "DUE_DATE");
        public final static Property EndOfCompPrefix = new Property(10, int.class, "endOfCompPrefix", false, "END_OF_COMP_PREFIX");
    };

    private DaoSession daoSession;


    public EntryDao(DaoConfig config) {
        super(config);
    }
    
    public EntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY\" (" + //
                "\"LINE\" INTEGER PRIMARY KEY NOT NULL ," + // 0: line
                "\"SELECTED\" INTEGER NOT NULL ," + // 1: selected
                "\"HIDDEN\" INTEGER NOT NULL ," + // 2: hidden
                "\"TEXT\" TEXT NOT NULL ," + // 3: text
                "\"COMPLETED\" INTEGER NOT NULL ," + // 4: completed
                "\"PRIORITY\" TEXT NOT NULL ," + // 5: priority
                "\"COMPLETION_DATE\" TEXT," + // 6: completionDate
                "\"CREATE_DATE\" TEXT," + // 7: createDate
                "\"THRESHOLD_DATE\" TEXT," + // 8: thresholdDate
                "\"DUE_DATE\" TEXT," + // 9: dueDate
                "\"END_OF_COMP_PREFIX\" INTEGER NOT NULL );"); // 10: endOfCompPrefix
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Entry entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLine());
        stmt.bindLong(2, entity.getSelected() ? 1L: 0L);
        stmt.bindLong(3, entity.getHidden() ? 1L: 0L);
        stmt.bindString(4, entity.getText());
        stmt.bindLong(5, entity.getCompleted() ? 1L: 0L);
        stmt.bindString(6, entity.getPriority());
 
        String completionDate = entity.getCompletionDate();
        if (completionDate != null) {
            stmt.bindString(7, completionDate);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(8, createDate);
        }
 
        String thresholdDate = entity.getThresholdDate();
        if (thresholdDate != null) {
            stmt.bindString(9, thresholdDate);
        }
 
        String dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindString(10, dueDate);
        }
        stmt.bindLong(11, entity.getEndOfCompPrefix());
    }

    @Override
    protected void attachEntity(Entry entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Entry readEntity(Cursor cursor, int offset) {
        Entry entity = new Entry( //
            cursor.getLong(offset + 0), // line
            cursor.getShort(offset + 1) != 0, // selected
            cursor.getShort(offset + 2) != 0, // hidden
            cursor.getString(offset + 3), // text
            cursor.getShort(offset + 4) != 0, // completed
            cursor.getString(offset + 5), // priority
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // completionDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // thresholdDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dueDate
            cursor.getInt(offset + 10) // endOfCompPrefix
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Entry entity, int offset) {
        entity.setLine(cursor.getLong(offset + 0));
        entity.setSelected(cursor.getShort(offset + 1) != 0);
        entity.setHidden(cursor.getShort(offset + 2) != 0);
        entity.setText(cursor.getString(offset + 3));
        entity.setCompleted(cursor.getShort(offset + 4) != 0);
        entity.setPriority(cursor.getString(offset + 5));
        entity.setCompletionDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setThresholdDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDueDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEndOfCompPrefix(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Entry entity, long rowId) {
        entity.setLine(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Entry entity) {
        if(entity != null) {
            return entity.getLine();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
