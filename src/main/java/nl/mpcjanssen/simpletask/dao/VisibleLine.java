package nl.mpcjanssen.simpletask.dao;

import nl.mpcjanssen.simpletask.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "VISIBLE_LINE".
 */
public class VisibleLine {

    private long position;
    private boolean isHeader;
    private Long taskLine;
    private String header;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VisibleLineDao myDao;

    private Entry entry;
    private Long entry__resolvedKey;


    public VisibleLine() {
    }

    public VisibleLine(long position) {
        this.position = position;
    }

    public VisibleLine(long position, boolean isHeader, Long taskLine, String header) {
        this.position = position;
        this.isHeader = isHeader;
        this.taskLine = taskLine;
        this.header = header;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVisibleLineDao() : null;
    }

    public long getPosition() {
        return position;
    }

    public void setPosition(long position) {
        this.position = position;
    }

    public boolean getIsHeader() {
        return isHeader;
    }

    public void setIsHeader(boolean isHeader) {
        this.isHeader = isHeader;
    }

    public Long getTaskLine() {
        return taskLine;
    }

    public void setTaskLine(Long taskLine) {
        this.taskLine = taskLine;
    }

    public String getHeader() {
        return header;
    }

    public void setHeader(String header) {
        this.header = header;
    }

    /** To-one relationship, resolved on first access. */
    public Entry getEntry() {
        Long __key = this.taskLine;
        if (entry__resolvedKey == null || !entry__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EntryDao targetDao = daoSession.getEntryDao();
            Entry entryNew = targetDao.load(__key);
            synchronized (this) {
                entry = entryNew;
            	entry__resolvedKey = __key;
            }
        }
        return entry;
    }

    public void setEntry(Entry entry) {
        synchronized (this) {
            this.entry = entry;
            taskLine = entry == null ? null : entry.getLine();
            entry__resolvedKey = taskLine;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
